

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 15 03:51:40 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F688
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0007                     	;# 
    24  000A                     	;# 
    25  000B                     	;# 
    26  000C                     	;# 
    27  000E                     	;# 
    28  000E                     	;# 
    29  000F                     	;# 
    30  0010                     	;# 
    31  0011                     	;# 
    32  0012                     	;# 
    33  0013                     	;# 
    34  0014                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0017                     	;# 
    38  0018                     	;# 
    39  0019                     	;# 
    40  001A                     	;# 
    41  001E                     	;# 
    42  001F                     	;# 
    43  0081                     	;# 
    44  0085                     	;# 
    45  0087                     	;# 
    46  008C                     	;# 
    47  008E                     	;# 
    48  008F                     	;# 
    49  0090                     	;# 
    50  0091                     	;# 
    51  0095                     	;# 
    52  0095                     	;# 
    53  0096                     	;# 
    54  0096                     	;# 
    55  0097                     	;# 
    56  0098                     	;# 
    57  0099                     	;# 
    58  009A                     	;# 
    59  009A                     	;# 
    60  009B                     	;# 
    61  009C                     	;# 
    62  009D                     	;# 
    63  009E                     	;# 
    64  009F                     	;# 
    65  001F                     _ADCON0	set	31
    66  001E                     _ADRESH	set	30
    67  000B                     _INTCON	set	11
    68  0007                     _PORTC	set	7
    69  0066                     _ADIF	set	102
    70  00F9                     _GO	set	249
    71  002A                     _RA2	set	42
    72  0038                     _RC0	set	56
    73  009F                     _ADCON1	set	159
    74  009E                     _ADRESL	set	158
    75  0091                     _ANSEL	set	145
    76  008C                     _PIE1	set	140
    77  0085                     _TRISA	set	133
    78  0087                     _TRISC	set	135
    79                           
    80                           	psect	text0
    81  0000                     __ptext0:	
    82                           ; #config settings
    83                           
    84                           
    85                           	psect	cinit
    86  0013                     start_initialization:	
    87                           ;psect for function _ISR
    88                           
    89  0013                     __initialization:	
    90                           
    91                           ; Clear objects allocated to COMMON
    92  0013  01F7               	clrf	__pbssCOMMON& (0+127)
    93  0014                     end_of_initialization:	
    94                           ;End of C runtime variable initialization code
    95                           
    96  0014                     __end_of__initialization:	
    97  0014  0183               	clrf	3
    98  0015  118A  2817         	ljmp	_main	;jump to C main() function
    99                           
   100                           	psect	bssCOMMON
   101  0077                     __pbssCOMMON:	
   102  0077                     _always_on:	
   103  0077                     	ds	1
   104                           
   105                           	psect	cstackCOMMON
   106  0070                     __pcstackCOMMON:	
   107  0070                     ?_set_receive:	
   108  0070                     ?_set_send:	
   109                           ; 0 bytes @ 0x0
   110                           
   111  0070                     ?_send_message:	
   112                           ; 0 bytes @ 0x0
   113                           
   114  0070                     ?_ISR:	
   115                           ; 0 bytes @ 0x0
   116                           
   117  0070                     ??_ISR:	
   118                           ; 0 bytes @ 0x0
   119                           
   120  0070                     ?_receive_msg:	
   121                           ; 0 bytes @ 0x0
   122                           
   123  0070                     ?_main:	
   124                           ; 1 bytes @ 0x0
   125                           
   126                           
   127                           ; 2 bytes @ 0x0
   128  0070                     	ds	5
   129  0075                     ISR@darkness:	
   130                           
   131                           ; 1 bytes @ 0x5
   132  0075                     	ds	1
   133  0076                     ??_set_receive:	
   134  0076                     ??_set_send:	
   135                           ; 0 bytes @ 0x6
   136                           
   137  0076                     receive_msg@msg:	
   138                           ; 0 bytes @ 0x6
   139                           
   140  0076                     send_message@msg:	
   141                           ; 1 bytes @ 0x6
   142                           
   143                           
   144                           ; 1 bytes @ 0x6
   145  0076                     	ds	1
   146                           
   147                           	psect	cstackBANK0
   148  0020                     __pcstackBANK0:	
   149  0020                     ??_receive_msg:	
   150  0020                     ??_send_message:	
   151                           ; 0 bytes @ 0x0
   152                           
   153                           
   154                           ; 0 bytes @ 0x0
   155  0020                     	ds	2
   156  0022                     ??_main:	
   157                           
   158                           ; 0 bytes @ 0x2
   159  0022                     	ds	1
   160  0023                     main@msg:	
   161                           
   162                           ; 1 bytes @ 0x3
   163  0023                     	ds	1
   164                           
   165                           	psect	maintext
   166  0017                     __pmaintext:	
   167 ;;
   168 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   169 ;;
   170 ;; *************** function _main *****************
   171 ;; Defined at:
   172 ;;		line 109 in file "main.c"
   173 ;; Parameters:    Size  Location     Type
   174 ;;		None
   175 ;; Auto vars:     Size  Location     Type
   176 ;;  msg             1    3[BANK0 ] struct .
   177 ;; Return value:  Size  Location     Type
   178 ;;                  2   65[None  ] int 
   179 ;; Registers used:
   180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   181 ;; Tracked objects:
   182 ;;		On entry : B00/0
   183 ;;		On exit  : 0/0
   184 ;;		Unchanged: 0/0
   185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   186 ;;      Params:         0       0       0       0
   187 ;;      Locals:         0       1       0       0
   188 ;;      Temps:          0       1       0       0
   189 ;;      Totals:         0       2       0       0
   190 ;;Total ram usage:        2 bytes
   191 ;; Hardware stack levels required when called:    3
   192 ;; This function calls:
   193 ;;		_receive_msg
   194 ;;		_send_message
   195 ;; This function is called by:
   196 ;;		Startup code after reset
   197 ;; This function uses a non-reentrant model
   198 ;;
   199                           
   200                           
   201                           ;psect for function _main
   202  0017                     _main:	
   203                           
   204                           ;main.c: 115: GO = 1;
   205                           
   206                           ;incstack = 0
   207                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   208  0017  1283               	bcf	3,5	;RP0=0, select bank0
   209  0018  1303               	bcf	3,6	;RP1=0, select bank0
   210  0019  149F               	bsf	31,1	;volatile
   211                           
   212                           ;main.c: 120: switch(msg.data)
   213  001A  2866               	goto	l717
   214  001B                     l719:	
   215                           ;main.c: 121: {
   216                           ;main.c: 122: case MSG_GET :
   217                           
   218                           
   219                           ;main.c: 123: {
   220                           ;main.c: 124: msg.data = ADRESH;
   221  001B  0823               	movf	main@msg,w
   222  001C  061E               	xorwf	30,w	;volatile
   223  001D  39F0               	andlw	-16
   224  001E  061E               	xorwf	30,w	;volatile
   225  001F  00A3               	movwf	main@msg
   226                           
   227                           ;main.c: 125: msg.data &= 0x2;
   228  0020  30F2               	movlw	-14
   229  0021  05A3               	andwf	main@msg,f
   230                           
   231                           ;main.c: 126: send_message(msg);
   232  0022  0823               	movf	main@msg,w
   233  0023  118A  20A1  118A   	fcall	_send_message
   234                           
   235                           ;main.c: 127: msg.data = ADRESL >> 4;
   236  0026  1683               	bsf	3,5	;RP0=1, select bank1
   237  0027  1303               	bcf	3,6	;RP1=0, select bank1
   238  0028  081E               	movf	30,w	;volatile
   239  0029  1283               	bcf	3,5	;RP0=0, select bank0
   240  002A  1303               	bcf	3,6	;RP1=0, select bank0
   241  002B  00A2               	movwf	??_main
   242  002C  3004               	movlw	4
   243  002D                     u275:	
   244  002D  1003               	clrc
   245  002E  0CA2               	rrf	??_main,f
   246  002F  3EFF               	addlw	-1
   247  0030  1D03               	skipz
   248  0031  282D               	goto	u275
   249  0032  0823               	movf	main@msg,w
   250  0033  0622               	xorwf	??_main,w
   251  0034  39F0               	andlw	-16
   252  0035  0622               	xorwf	??_main,w
   253  0036  00A3               	movwf	main@msg
   254                           
   255                           ;main.c: 128: send_message(msg);
   256  0037  0823               	movf	main@msg,w
   257  0038  118A  20A1  118A   	fcall	_send_message
   258                           
   259                           ;main.c: 129: msg.data = ADRESL;
   260  003B  1283               	bcf	3,5	;RP0=0, select bank0
   261  003C  1303               	bcf	3,6	;RP1=0, select bank0
   262  003D  0823               	movf	main@msg,w
   263  003E  1683               	bsf	3,5	;RP0=1, select bank1
   264  003F  1303               	bcf	3,6	;RP1=0, select bank1
   265  0040  061E               	xorwf	30,w	;volatile
   266  0041  39F0               	andlw	-16
   267  0042  061E               	xorwf	30,w	;volatile
   268  0043  1283               	bcf	3,5	;RP0=0, select bank0
   269  0044  1303               	bcf	3,6	;RP1=0, select bank0
   270  0045  00A3               	movwf	main@msg
   271                           
   272                           ;main.c: 130: send_message(msg);
   273  0046  0823               	movf	main@msg,w
   274  0047  118A  20A1  118A   	fcall	_send_message
   275                           
   276                           ;main.c: 131: msg.data = MSG_ACK;
   277  004A  1283               	bcf	3,5	;RP0=0, select bank0
   278  004B  1303               	bcf	3,6	;RP1=0, select bank0
   279  004C  0823               	movf	main@msg,w
   280  004D  39F0               	andlw	-16
   281  004E  380E               	iorlw	14
   282  004F  00A3               	movwf	main@msg
   283                           
   284                           ;main.c: 132: send_message(msg);
   285  0050  0823               	movf	main@msg,w
   286  0051  118A  20A1  118A   	fcall	_send_message
   287                           
   288                           ;main.c: 133: break;
   289  0054  2866               	goto	l717
   290  0055                     l731:	
   291                           ;main.c: 136: default :
   292                           
   293                           ;main.c: 134: }
   294                           ;main.c: 135: case MSG_PING :
   295                           
   296                           
   297                           ;main.c: 137: {
   298                           ;main.c: 138: msg.data = MSG_ACK;
   299  0055  1283               	bcf	3,5	;RP0=0, select bank0
   300  0056  1303               	bcf	3,6	;RP1=0, select bank0
   301  0057  0823               	movf	main@msg,w
   302  0058  39F0               	andlw	-16
   303  0059  380E               	iorlw	14
   304  005A  00A3               	movwf	main@msg
   305                           
   306                           ;main.c: 139: send_message(msg);
   307  005B  0823               	movf	main@msg,w
   308  005C  118A  20A1  118A   	fcall	_send_message
   309                           
   310                           ;main.c: 143: {
   311                           ;main.c: 144: break;
   312                           
   313                           ;main.c: 141: }
   314                           ;main.c: 142: case MSG_RESET :
   315                           
   316                           ;main.c: 140: break;
   317  005F  2866               	goto	l717
   318  0060                     l735:	
   319                           ;main.c: 145: }
   320                           ;main.c: 146: case MSG_LIGHTLED :
   321                           
   322                           
   323                           ;main.c: 147: {
   324                           ;main.c: 148: always_on ^= 0xFF;
   325  0060  30FF               	movlw	255
   326  0061  1283               	bcf	3,5	;RP0=0, select bank0
   327  0062  1303               	bcf	3,6	;RP1=0, select bank0
   328  0063  00A2               	movwf	??_main
   329  0064  0822               	movf	??_main,w
   330  0065  06F7               	xorwf	_always_on,f
   331  0066                     l717:	
   332                           ;main.c: 117: while(1)
   333                           
   334                           ;main.c: 150: }
   335                           ;main.c: 151: }
   336                           
   337                           ;main.c: 149: break;
   338                           
   339                           
   340                           ;main.c: 118: {
   341                           ;main.c: 119: msg=receive_msg();
   342  0066  118A  207E  118A   	fcall	_receive_msg
   343  0069  1283               	bcf	3,5	;RP0=0, select bank0
   344  006A  1303               	bcf	3,6	;RP1=0, select bank0
   345  006B  00A2               	movwf	??_main
   346  006C  0822               	movf	??_main,w
   347  006D  00A3               	movwf	main@msg
   348  006E  0823               	movf	main@msg,w
   349  006F  390F               	andlw	15
   350                           
   351                           ; Switch size 1, requested type "space"
   352                           ; Number of cases is 4, Range of values is 0 to 13
   353                           ; switch strategies available:
   354                           ; Name         Instructions Cycles
   355                           ; simple_byte           13     7 (average)
   356                           ; direct_byte           35     7 (fixed)
   357                           ; jumptable            260     6 (fixed)
   358                           ;	Chosen strategy is simple_byte
   359  0070  3A00               	xorlw	0	; case 0
   360  0071  1903               	skipnz
   361  0072  2866               	goto	l717
   362  0073  3A01               	xorlw	1	; case 1
   363  0074  1903               	skipnz
   364  0075  2855               	goto	l731
   365  0076  3A03               	xorlw	3	; case 2
   366  0077  1903               	skipnz
   367  0078  281B               	goto	l719
   368  0079  3A0F               	xorlw	15	; case 13
   369  007A  1903               	skipnz
   370  007B  2860               	goto	l735
   371  007C  2855               	goto	l731
   372  007D  2866               	goto	l717
   373  007E                     __end_of_main:	
   374                           ;main.c: 152: }
   375                           ;main.c: 154: return 0;
   376                           ;	Return value of _main is never used
   377                           
   378                           
   379                           	psect	text1
   380  00A1                     __ptext1:	
   381 ;; *************** function _send_message *****************
   382 ;; Defined at:
   383 ;;		line 93 in file "main.c"
   384 ;; Parameters:    Size  Location     Type
   385 ;;  msg             1    wreg     struct .
   386 ;; Auto vars:     Size  Location     Type
   387 ;;  msg             1    6[COMMON] struct .
   388 ;; Return value:  Size  Location     Type
   389 ;;		None               void
   390 ;; Registers used:
   391 ;;		wreg, status,2, status,0, pclath, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : 0/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   397 ;;      Params:         0       0       0       0
   398 ;;      Locals:         1       0       0       0
   399 ;;      Temps:          0       2       0       0
   400 ;;      Totals:         1       2       0       0
   401 ;;Total ram usage:        3 bytes
   402 ;; Hardware stack levels used:    1
   403 ;; Hardware stack levels required when called:    2
   404 ;; This function calls:
   405 ;;		_set_receive
   406 ;;		_set_send
   407 ;; This function is called by:
   408 ;;		_main
   409 ;; This function uses a non-reentrant model
   410 ;;
   411                           
   412                           
   413                           ;psect for function _send_message
   414  00A1                     _send_message:	
   415                           
   416                           ;incstack = 0
   417                           ; Regs used in _send_message: [wreg+status,2+status,0+pclath+cstack]
   418                           ;send_message@msg stored from wreg
   419  00A1  00F6               	movwf	send_message@msg
   420                           
   421                           ;main.c: 96: set_send();
   422  00A2  118A  20DD  118A   	fcall	_set_send
   423                           
   424                           ;main.c: 97: PORTC &= 0b11000011;
   425  00A5  30C3               	movlw	195
   426  00A6  1283               	bcf	3,5	;RP0=0, select bank0
   427  00A7  1303               	bcf	3,6	;RP1=0, select bank0
   428  00A8  00A0               	movwf	??_send_message
   429  00A9  0820               	movf	??_send_message,w
   430  00AA  0587               	andwf	7,f	;volatile
   431                           
   432                           ;main.c: 98: PORTC |= msg.data << 2;
   433  00AB  0876               	movf	send_message@msg,w
   434  00AC  390F               	andlw	15
   435  00AD  00A0               	movwf	??_send_message
   436  00AE  3001               	movlw	1
   437  00AF                     u245:	
   438  00AF  1003               	clrc
   439  00B0  0DA0               	rlf	??_send_message,f
   440  00B1  3EFF               	addlw	-1
   441  00B2  1D03               	skipz
   442  00B3  28AF               	goto	u245
   443  00B4  1003               	clrc
   444  00B5  0D20               	rlf	??_send_message,w
   445  00B6  00A1               	movwf	??_send_message+1
   446  00B7  0821               	movf	??_send_message+1,w
   447  00B8  0487               	iorwf	7,f	;volatile
   448  00B9                     l57:	
   449                           ;main.c: 100: while(!RA2);
   450                           
   451  00B9  1D05               	btfss	5,2	;volatile
   452  00BA  28B9               	goto	l57
   453  00BB                     l60:	
   454                           ;main.c: 102: while(RA2);
   455                           
   456  00BB  1905               	btfsc	5,2	;volatile
   457  00BC  28BB               	goto	l60
   458                           
   459                           ;main.c: 103: set_receive();
   460  00BD  118A  20E2         	fcall	_set_receive
   461  00BF  0008               	return
   462  00C0                     __end_of_send_message:	
   463                           ;main.c: 104: return;
   464                           
   465                           
   466                           	psect	text2
   467  00DD                     __ptext2:	
   468 ;; *************** function _set_send *****************
   469 ;; Defined at:
   470 ;;		line 68 in file "main.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;		None               void
   477 ;; Registers used:
   478 ;;		wreg
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   484 ;;      Params:         0       0       0       0
   485 ;;      Locals:         0       0       0       0
   486 ;;      Temps:          0       0       0       0
   487 ;;      Totals:         0       0       0       0
   488 ;;Total ram usage:        0 bytes
   489 ;; Hardware stack levels used:    1
   490 ;; Hardware stack levels required when called:    1
   491 ;; This function calls:
   492 ;;		Nothing
   493 ;; This function is called by:
   494 ;;		_send_message
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           
   499                           ;psect for function _set_send
   500  00DD                     _set_send:	
   501                           
   502                           ;main.c: 70: TRISC = 0b00000010;
   503                           
   504                           ;incstack = 0
   505                           ; Regs used in _set_send: [wreg]
   506  00DD  3002               	movlw	2
   507  00DE  1683               	bsf	3,5	;RP0=1, select bank1
   508  00DF  1303               	bcf	3,6	;RP1=0, select bank1
   509  00E0  0087               	movwf	7	;volatile
   510  00E1  0008               	return
   511  00E2                     __end_of_set_send:	
   512                           ;main.c: 71: return;
   513                           
   514                           
   515                           	psect	text3
   516  007E                     __ptext3:	
   517 ;; *************** function _receive_msg *****************
   518 ;; Defined at:
   519 ;;		line 81 in file "main.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;  msg             1    6[COMMON] struct .
   524 ;; Return value:  Size  Location     Type
   525 ;;                  1    wreg      struct .
   526 ;; Registers used:
   527 ;;		wreg, status,2, status,0, pclath, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : 0/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   533 ;;      Params:         0       0       0       0
   534 ;;      Locals:         1       0       0       0
   535 ;;      Temps:          0       2       0       0
   536 ;;      Totals:         1       2       0       0
   537 ;;Total ram usage:        3 bytes
   538 ;; Hardware stack levels used:    1
   539 ;; Hardware stack levels required when called:    2
   540 ;; This function calls:
   541 ;;		_set_receive
   542 ;; This function is called by:
   543 ;;		_main
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           
   548                           ;psect for function _receive_msg
   549  007E                     _receive_msg:	
   550                           
   551                           ;main.c: 83: message msg;
   552                           ;main.c: 84: msg.data = 0x0;
   553                           
   554                           ;incstack = 0
   555                           ; Regs used in _receive_msg: [wreg+status,2+status,0+pclath+cstack]
   556  007E  30F0               	movlw	-16
   557  007F  05F6               	andwf	receive_msg@msg,f
   558  0080                     l45:	
   559                           ;main.c: 85: while(RA2);
   560                           
   561  0080  1283               	bcf	3,5	;RP0=0, select bank0
   562  0081  1303               	bcf	3,6	;RP1=0, select bank0
   563  0082  1905               	btfsc	5,2	;volatile
   564  0083  2880               	goto	l45
   565                           
   566                           ;main.c: 86: set_receive();
   567  0084  118A  20E2  118A   	fcall	_set_receive
   568  0087                     l48:	
   569                           ;main.c: 87: while(!RA2);
   570                           
   571  0087  1283               	bcf	3,5	;RP0=0, select bank0
   572  0088  1303               	bcf	3,6	;RP1=0, select bank0
   573  0089  1D05               	btfss	5,2	;volatile
   574  008A  2887               	goto	l48
   575                           
   576                           ;main.c: 88: msg.data |= PORTC >> 2;
   577  008B  0807               	movf	7,w	;volatile
   578  008C  00A0               	movwf	??_receive_msg
   579  008D  3002               	movlw	2
   580  008E                     u225:	
   581  008E  1003               	clrc
   582  008F  0CA0               	rrf	??_receive_msg,f
   583  0090  3EFF               	addlw	-1
   584  0091  1D03               	skipz
   585  0092  288E               	goto	u225
   586  0093  0876               	movf	receive_msg@msg,w
   587  0094  390F               	andlw	15
   588  0095  00A1               	movwf	??_receive_msg+1
   589  0096  0820               	movf	??_receive_msg,w
   590  0097  04A1               	iorwf	??_receive_msg+1,f
   591  0098  0876               	movf	receive_msg@msg,w
   592  0099  0621               	xorwf	??_receive_msg+1,w
   593  009A  39F0               	andlw	-16
   594  009B  0621               	xorwf	??_receive_msg+1,w
   595  009C  00F6               	movwf	receive_msg@msg
   596  009D                     l51:	
   597                           ;main.c: 89: while(RA2);
   598                           
   599  009D  1905               	btfsc	5,2	;volatile
   600  009E  289D               	goto	l51
   601                           
   602                           ;main.c: 90: return msg;
   603  009F  0876               	movf	receive_msg@msg,w
   604  00A0  0008               	return
   605  00A1                     __end_of_receive_msg:	
   606                           
   607                           	psect	text4
   608  00E2                     __ptext4:	
   609 ;; *************** function _set_receive *****************
   610 ;; Defined at:
   611 ;;		line 49 in file "main.c"
   612 ;; Parameters:    Size  Location     Type
   613 ;;		None
   614 ;; Auto vars:     Size  Location     Type
   615 ;;		None
   616 ;; Return value:  Size  Location     Type
   617 ;;		None               void
   618 ;; Registers used:
   619 ;;		wreg
   620 ;; Tracked objects:
   621 ;;		On entry : 0/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   625 ;;      Params:         0       0       0       0
   626 ;;      Locals:         0       0       0       0
   627 ;;      Temps:          0       0       0       0
   628 ;;      Totals:         0       0       0       0
   629 ;;Total ram usage:        0 bytes
   630 ;; Hardware stack levels used:    1
   631 ;; Hardware stack levels required when called:    1
   632 ;; This function calls:
   633 ;;		Nothing
   634 ;; This function is called by:
   635 ;;		_receive_msg
   636 ;;		_send_message
   637 ;;		_set_strobe_input
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           
   642                           ;psect for function _set_receive
   643  00E2                     _set_receive:	
   644                           
   645                           ;main.c: 51: TRISC = 0b00111110;
   646                           
   647                           ;incstack = 0
   648                           ; Regs used in _set_receive: [wreg]
   649  00E2  303E               	movlw	62
   650  00E3  1683               	bsf	3,5	;RP0=1, select bank1
   651  00E4  1303               	bcf	3,6	;RP1=0, select bank1
   652  00E5  0087               	movwf	7	;volatile
   653  00E6  0008               	return
   654  00E7                     __end_of_set_receive:	
   655                           ;main.c: 52: return;
   656                           
   657                           
   658                           	psect	text5
   659  00C0                     __ptext5:	
   660 ;; *************** function _ISR *****************
   661 ;; Defined at:
   662 ;;		line 158 in file "main.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;		None
   665 ;; Auto vars:     Size  Location     Type
   666 ;;  darkness        1    5[COMMON] unsigned char 
   667 ;; Return value:  Size  Location     Type
   668 ;;		None               void
   669 ;; Registers used:
   670 ;;		wreg, status,2, status,0
   671 ;; Tracked objects:
   672 ;;		On entry : 0/0
   673 ;;		On exit  : 0/0
   674 ;;		Unchanged: 0/0
   675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   676 ;;      Params:         0       0       0       0
   677 ;;      Locals:         1       0       0       0
   678 ;;      Temps:          5       0       0       0
   679 ;;      Totals:         6       0       0       0
   680 ;;Total ram usage:        6 bytes
   681 ;; Hardware stack levels used:    1
   682 ;; This function calls:
   683 ;;		Nothing
   684 ;; This function is called by:
   685 ;;		Interrupt level 1
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           
   690                           ;psect for function _ISR
   691  00C0                     _ISR:	
   692                           
   693                           ;main.c: 160: if (ADIF)
   694  00C0  1F0C               	btfss	12,6	;volatile
   695  00C1  28D2               	goto	i1l83
   696                           
   697                           ;main.c: 161: {
   698                           ;main.c: 162: unsigned char darkness;
   699                           ;main.c: 164: ADIF = 0;
   700  00C2  130C               	bcf	12,6	;volatile
   701                           
   702                           ;main.c: 166: darkness = ADRESH;
   703  00C3  081E               	movf	30,w	;volatile
   704  00C4  00F0               	movwf	??_ISR
   705  00C5  0870               	movf	??_ISR,w
   706  00C6  00F5               	movwf	ISR@darkness
   707                           
   708                           ;main.c: 167: if (darkness > 2 )
   709  00C7  3003               	movlw	3
   710  00C8  0275               	subwf	ISR@darkness,w
   711  00C9  1C03               	skipc
   712  00CA  28CD               	goto	i1l617
   713                           
   714                           ;main.c: 168: {
   715                           ;main.c: 169: RC0 = 1;
   716  00CB  1407               	bsf	7,0	;volatile
   717                           
   718                           ;main.c: 170: }
   719  00CC  28D1               	goto	i1l81
   720  00CD                     i1l617:	
   721                           
   722                           ;main.c: 171: else if (always_on != 0xFF)
   723  00CD  0A77               	incf	_always_on,w
   724  00CE  1903               	btfsc	3,2
   725  00CF  28D1               	goto	i1l81
   726                           
   727                           ;main.c: 172: {
   728                           ;main.c: 173: RC0 = 0;
   729  00D0  1007               	bcf	7,0	;volatile
   730  00D1                     i1l81:	
   731                           
   732                           ;main.c: 174: }
   733                           ;main.c: 175: GO =1;
   734  00D1  149F               	bsf	31,1	;volatile
   735  00D2                     i1l83:	
   736  00D2  0874               	movf	??_ISR+4,w
   737  00D3  00FF               	movwf	127
   738  00D4  0873               	movf	??_ISR+3,w
   739  00D5  008A               	movwf	10
   740  00D6  0872               	movf	??_ISR+2,w
   741  00D7  0084               	movwf	4
   742  00D8  0E71               	swapf	(??_ISR+1)^(0+-128),w
   743  00D9  0083               	movwf	3
   744  00DA  0EFE               	swapf	126,f
   745  00DB  0E7E               	swapf	126,w
   746  00DC  0009               	retfie
   747  00DD                     __end_of_ISR:	
   748  007E                     btemp	set	126	;btemp
   749  007E                     wtemp	set	126
   750  007E                     wtemp0	set	126
   751  0080                     wtemp1	set	128
   752  0082                     wtemp2	set	130
   753  0084                     wtemp3	set	132
   754  0086                     wtemp4	set	134
   755  0088                     wtemp5	set	136
   756  007F                     wtemp6	set	127
   757  007E                     ttemp	set	126
   758  007E                     ttemp0	set	126
   759  0081                     ttemp1	set	129
   760  0084                     ttemp2	set	132
   761  0087                     ttemp3	set	135
   762  007F                     ttemp4	set	127
   763  007E                     ltemp	set	126
   764  007E                     ltemp0	set	126
   765  0082                     ltemp1	set	130
   766  0086                     ltemp2	set	134
   767  0080                     ltemp3	set	128
   768                           
   769                           	psect	intentry
   770  0004                     __pintentry:	
   771                           ;incstack = 0
   772                           ; Regs used in _ISR: [wreg+status,2+status,0]
   773                           
   774  0004                     interrupt_function:	
   775  007E                     saved_w	set	btemp
   776  0004  00FE               	movwf	btemp
   777  0005  0E03               	swapf	3,w
   778  0006  00F1               	movwf	??_ISR+1
   779  0007  0804               	movf	4,w
   780  0008  00F2               	movwf	??_ISR+2
   781  0009  080A               	movf	10,w
   782  000A  00F3               	movwf	??_ISR+3
   783  000B  1283               	bcf	3,5	;RP0=0, select bank0
   784  000C  1303               	bcf	3,6	;RP1=0, select bank0
   785  000D  087F               	movf	btemp+1,w
   786  000E  00F4               	movwf	??_ISR+4
   787  000F  118A  28C0         	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       8
    BANK0            80      4       4
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_receive_msg
    _main->_send_message

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_receive_msg
    _main->_send_message

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     275
                                              2 BANK0      2     2      0
                        _receive_msg
                       _send_message
 ---------------------------------------------------------------------------------
 (1) _send_message                                         3     3      0      31
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                        _set_receive
                           _set_send
 ---------------------------------------------------------------------------------
 (2) _set_send                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _receive_msg                                          3     3      0      37
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                        _set_receive
 ---------------------------------------------------------------------------------
 (2) _set_receive                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  6     6      0      15
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _receive_msg
     _set_receive
   _send_message
     _set_receive
     _set_send

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      4       4       3        5.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       C       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0       C      10        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 15 03:51:40 2015

                     l51 009D                       l60 00BB                       l45 0080  
                     l48 0087                       l57 00B9                       _GO 00F9  
                    l731 0055                      l717 0066                      l735 0060  
                    l719 001B                      _RA2 002A                      _RC0 0038  
                    u225 008E                      u245 00AF                      u275 002D  
                    _ISR 00C0                      fsr0 0004                     ?_ISR 0070  
                   _ADIF 0066                     _PIE1 008C                     i1l81 00D1  
                   i1l83 00D2                     _main 0017                     btemp 007E  
                   ltemp 007E                     start 0011                     ttemp 007E  
                   wtemp 007E                    ??_ISR 0070                    ?_main 0070  
                  _ANSEL 0091                    i1l617 00CD                    _PORTC 0007  
                  _TRISA 0085                    _TRISC 0087                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F             ?_receive_msg 0070  
        __initialization 0013             __end_of_main 007E                   ??_main 0022  
        send_message@msg 0076                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                   _INTCON 000B  
           ?_set_receive 0070         __end_of_set_send 00E2                   saved_w 007E  
__end_of__initialization 0014           __pcstackCOMMON 0070              ISR@darkness 0075  
         receive_msg@msg 0076               __pmaintext 0017     __size_of_receive_msg 0023  
             __pintentry 0004            ?_send_message 0070                ?_set_send 0070  
   __size_of_set_receive 0005           ??_send_message 0020                  __ptext0 0000  
                __ptext1 00A1                  __ptext2 00DD                  __ptext3 007E  
                __ptext4 00E2                  __ptext5 00C0             __size_of_ISR 001D  
                main@msg 0023     end_of_initialization 0014               ??_set_send 0076  
    start_initialization 0013              __end_of_ISR 00DD     __end_of_send_message 00C0  
            __pbssCOMMON 0077                ___latbits 0001            __pcstackBANK0 0020  
          ??_receive_msg 0020        __size_of_set_send 0005                _always_on 0077  
      interrupt_function 0004            ??_set_receive 0076      __end_of_receive_msg 00A1  
  __size_of_send_message 001F             _send_message 00A1      __end_of_set_receive 00E7  
          __size_of_main 0067              _receive_msg 007E                 _set_send 00DD  
               intlevel1 0000              _set_receive 00E2  
