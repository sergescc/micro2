

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Oct 22 21:23:34 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F688
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x7E,2
    21  0000                     	;# 
    22  0001                     	;# 
    23  0002                     	;# 
    24  0003                     	;# 
    25  0004                     	;# 
    26  0005                     	;# 
    27  0007                     	;# 
    28  000A                     	;# 
    29  000B                     	;# 
    30  000C                     	;# 
    31  000E                     	;# 
    32  000E                     	;# 
    33  000F                     	;# 
    34  0010                     	;# 
    35  0011                     	;# 
    36  0012                     	;# 
    37  0013                     	;# 
    38  0014                     	;# 
    39  0015                     	;# 
    40  0016                     	;# 
    41  0017                     	;# 
    42  0018                     	;# 
    43  0019                     	;# 
    44  001A                     	;# 
    45  001E                     	;# 
    46  001F                     	;# 
    47  0081                     	;# 
    48  0085                     	;# 
    49  0087                     	;# 
    50  008C                     	;# 
    51  008E                     	;# 
    52  008F                     	;# 
    53  0090                     	;# 
    54  0091                     	;# 
    55  0095                     	;# 
    56  0095                     	;# 
    57  0096                     	;# 
    58  0096                     	;# 
    59  0097                     	;# 
    60  0098                     	;# 
    61  0099                     	;# 
    62  009A                     	;# 
    63  009A                     	;# 
    64  009B                     	;# 
    65  009C                     	;# 
    66  009D                     	;# 
    67  009E                     	;# 
    68  009F                     	;# 
    69                           
    70                           	psect	nvBANK0
    71  0024                     __pnvBANK0:	
    72  0024                     _adc_on:	
    73  0024                     	ds	2
    74  001F                     _ADCON0	set	31
    75  001F                     _ADCON0bits	set	31
    76  001E                     _ADRESH	set	30
    77  000B                     _INTCONbits	set	11
    78  000C                     _PIR1bits	set	12
    79  0007                     _PORTC	set	7
    80  0066                     _ADIF	set	102
    81  002A                     _RA2	set	42
    82  0038                     _RC0	set	56
    83  005A                     _T0IF	set	90
    84  009F                     _ADCON1	set	159
    85  009E                     _ADRESL	set	158
    86  0091                     _ANSEL	set	145
    87  0091                     _ANSELbits	set	145
    88  0081                     _OPTION_REG	set	129
    89  008C                     _PIE1bits	set	140
    90  0085                     _TRISA	set	133
    91  0087                     _TRISC	set	135
    92                           
    93                           ; #config settings
    94  0000                     
    95                           	psect	cinit
    96  0013                     start_initialization:	
    97  0013                     __initialization:	
    98                           
    99                           ; Clear objects allocated to BANK0
   100  0013  01A0               	clrf	__pbssBANK0& (0+127)
   101  0014  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   102  0015  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   103  0016  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   104  0017                     end_of_initialization:	
   105                           ;End of C runtime variable initialization code
   106                           
   107  0017                     __end_of__initialization:	
   108  0017  0183               	clrf	3
   109  0018  118A  281A         	ljmp	_main	;jump to C main() function
   110                           
   111                           	psect	bssBANK0
   112  0020                     __pbssBANK0:	
   113  0020                     _always_on:	
   114  0020                     	ds	2
   115  0022                     _voltage:	
   116  0022                     	ds	2
   117                           
   118                           	psect	cstackCOMMON
   119  0070                     __pcstackCOMMON:	
   120  0070                     ?_set_send:	
   121  0070                     ?_set_receive:	
   122                           ; 0 bytes @ 0x0
   123                           
   124  0070                     ?_set_strobe_input:	
   125                           ; 0 bytes @ 0x0
   126                           
   127  0070                     ?_adc_init:	
   128                           ; 0 bytes @ 0x0
   129                           
   130  0070                     ?_interrupt_on:	
   131                           ; 0 bytes @ 0x0
   132                           
   133  0070                     ?_interrupt_off:	
   134                           ; 0 bytes @ 0x0
   135                           
   136  0070                     ?_send_message:	
   137                           ; 0 bytes @ 0x0
   138                           
   139  0070                     ?_isr:	
   140                           ; 0 bytes @ 0x0
   141                           
   142  0070                     ??_isr:	
   143                           ; 0 bytes @ 0x0
   144                           
   145  0070                     ?_receive_msg:	
   146                           ; 0 bytes @ 0x0
   147                           
   148  0070                     ?_main:	
   149                           ; 1 bytes @ 0x0
   150                           
   151                           
   152                           ; 2 bytes @ 0x0
   153  0070                     	ds	4
   154  0074                     ??_set_send:	
   155  0074                     ??_set_receive:	
   156                           ; 0 bytes @ 0x4
   157                           
   158  0074                     ??_adc_init:	
   159                           ; 0 bytes @ 0x4
   160                           
   161  0074                     ??_interrupt_on:	
   162                           ; 0 bytes @ 0x4
   163                           
   164  0074                     ??_interrupt_off:	
   165                           ; 0 bytes @ 0x4
   166                           
   167                           
   168                           ; 0 bytes @ 0x4
   169  0074                     	ds	1
   170  0075                     ??_set_strobe_input:	
   171  0075                     ??_receive_msg:	
   172                           ; 0 bytes @ 0x5
   173                           
   174  0075                     ??_send_message:	
   175                           ; 0 bytes @ 0x5
   176                           
   177                           
   178                           ; 0 bytes @ 0x5
   179  0075                     	ds	2
   180  0077                     receive_msg@msg:	
   181  0077                     send_message@msg:	
   182                           ; 1 bytes @ 0x7
   183                           
   184                           
   185                           ; 1 bytes @ 0x7
   186  0077                     	ds	1
   187  0078                     ??_main:	
   188                           
   189                           ; 0 bytes @ 0x8
   190  0078                     	ds	2
   191                           
   192                           	psect	cstackBANK0
   193  0026                     __pcstackBANK0:	
   194  0026                     main@msg:	
   195                           
   196                           ; 1 bytes @ 0x0
   197  0026                     	ds	1
   198                           
   199                           	psect	maintext
   200  001A                     __pmaintext:	
   201 ;;
   202 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   203 ;;
   204 ;; *************** function _main *****************
   205 ;; Defined at:
   206 ;;		line 209 in file "main.c"
   207 ;; Parameters:    Size  Location     Type
   208 ;;		None
   209 ;; Auto vars:     Size  Location     Type
   210 ;;  msg             1    0[BANK0 ] struct .
   211 ;; Return value:  Size  Location     Type
   212 ;;                  2   97[None  ] int 
   213 ;; Registers used:
   214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   215 ;; Tracked objects:
   216 ;;		On entry : B00/0
   217 ;;		On exit  : 0/0
   218 ;;		Unchanged: 0/0
   219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   220 ;;      Params:         0       0       0       0
   221 ;;      Locals:         0       1       0       0
   222 ;;      Temps:          2       0       0       0
   223 ;;      Totals:         2       1       0       0
   224 ;;Total ram usage:        3 bytes
   225 ;; Hardware stack levels required when called:    3
   226 ;; This function calls:
   227 ;;		_adc_init
   228 ;;		_interrupt_on
   229 ;;		_receive_msg
   230 ;;		_send_message
   231 ;;		_set_strobe_input
   232 ;; This function is called by:
   233 ;;		Startup code after reset
   234 ;; This function uses a non-reentrant model
   235 ;;
   236                           
   237                           
   238                           ;psect for function _main
   239  001A                     _main:	
   240                           
   241                           ;main.c: 212: message msg;
   242                           ;main.c: 213: set_strobe_input();
   243                           
   244                           ;incstack = 0
   245                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   246  001A  118A  2142  118A   	fcall	_set_strobe_input
   247                           
   248                           ;main.c: 214: adc_init();
   249  001D  118A  2128  118A   	fcall	_adc_init
   250                           
   251                           ;main.c: 215: always_on = 0;
   252  0020  1283               	bcf	3,5	;RP0=0, select bank0
   253  0021  1303               	bcf	3,6	;RP1=0, select bank0
   254  0022  01A0               	clrf	_always_on
   255  0023  01A1               	clrf	_always_on+1
   256                           
   257                           ;main.c: 216: adc_on = 1;
   258  0024  3001               	movlw	1
   259  0025  00A4               	movwf	_adc_on
   260  0026  3000               	movlw	0
   261  0027  00A5               	movwf	_adc_on+1
   262  0028                     l805:	
   263                           ;main.c: 217: while(1)
   264                           
   265                           
   266                           ;main.c: 218: {
   267                           ;main.c: 220: msg = receive_msg();
   268  0028  118A  20E1  118A   	fcall	_receive_msg
   269  002B  00F8               	movwf	??_main
   270  002C  0878               	movf	??_main,w
   271  002D  1283               	bcf	3,5	;RP0=0, select bank0
   272  002E  1303               	bcf	3,6	;RP1=0, select bank0
   273  002F  00A6               	movwf	main@msg
   274                           
   275                           ;main.c: 221: switch(msg.data)
   276  0030  288D               	goto	l845
   277  0031                     l807:	
   278                           ;main.c: 222: {
   279                           ;main.c: 223: case MSG_GET :
   280                           
   281                           
   282                           ;main.c: 224: msg.data = voltage >> 8;
   283  0031  0823               	movf	_voltage+1,w
   284  0032  00F9               	movwf	??_main+1
   285  0033  0822               	movf	_voltage,w
   286  0034  00F8               	movwf	??_main
   287  0035  0879               	movf	??_main+1,w
   288  0036  00F8               	movwf	??_main
   289  0037  01F9               	clrf	??_main+1
   290  0038  0826               	movf	main@msg,w
   291  0039  0678               	xorwf	??_main,w
   292  003A  39F0               	andlw	-16
   293  003B  0678               	xorwf	??_main,w
   294  003C  00A6               	movwf	main@msg
   295                           
   296                           ;main.c: 225: msg.data &= 0x2;
   297  003D  30F2               	movlw	-14
   298  003E  05A6               	andwf	main@msg,f
   299                           
   300                           ;main.c: 226: send_message(msg);
   301  003F  0826               	movf	main@msg,w
   302  0040  118A  2109  118A   	fcall	_send_message
   303                           
   304                           ;main.c: 227: msg.data = voltage >> 4;
   305  0043  1283               	bcf	3,5	;RP0=0, select bank0
   306  0044  1303               	bcf	3,6	;RP1=0, select bank0
   307  0045  0823               	movf	_voltage+1,w
   308  0046  00F9               	movwf	??_main+1
   309  0047  0822               	movf	_voltage,w
   310  0048  00F8               	movwf	??_main
   311  0049  3004               	movlw	4
   312  004A                     u355:	
   313  004A  1003               	clrc
   314  004B  0CF9               	rrf	??_main+1,f
   315  004C  0CF8               	rrf	??_main,f
   316  004D  3EFF               	addlw	-1
   317  004E  1D03               	skipz
   318  004F  284A               	goto	u355
   319  0050  0826               	movf	main@msg,w
   320  0051  0678               	xorwf	??_main,w
   321  0052  39F0               	andlw	-16
   322  0053  0678               	xorwf	??_main,w
   323  0054  00A6               	movwf	main@msg
   324                           
   325                           ;main.c: 228: send_message(msg);
   326  0055  0826               	movf	main@msg,w
   327  0056  118A  2109  118A   	fcall	_send_message
   328                           
   329                           ;main.c: 229: msg.data = voltage;
   330  0059  1283               	bcf	3,5	;RP0=0, select bank0
   331  005A  1303               	bcf	3,6	;RP1=0, select bank0
   332  005B  0826               	movf	main@msg,w
   333  005C  0622               	xorwf	_voltage,w
   334  005D  39F0               	andlw	-16
   335  005E  0622               	xorwf	_voltage,w
   336  005F  00A6               	movwf	main@msg
   337                           
   338                           ;main.c: 230: send_message(msg);
   339  0060  0826               	movf	main@msg,w
   340  0061  118A  2109  118A   	fcall	_send_message
   341                           
   342                           ;main.c: 231: msg.data = MSG_ACK;
   343  0064  1283               	bcf	3,5	;RP0=0, select bank0
   344  0065  1303               	bcf	3,6	;RP1=0, select bank0
   345  0066  2888               	goto	L7
   346  0067                     l817:	
   347                           ;main.c: 233: case MSG_LIGHTLED :
   348                           
   349                           ;main.c: 232: break;
   350                           
   351                           
   352                           ;main.c: 234: if (always_on)
   353  0067  0820               	movf	_always_on,w
   354  0068  0421               	iorwf	_always_on+1,w
   355  0069  1903               	btfsc	3,2
   356  006A  286E               	goto	l823
   357                           
   358                           ;main.c: 235: {
   359                           ;main.c: 236: always_on = 0;
   360  006B  01A0               	clrf	_always_on
   361  006C  01A1               	clrf	_always_on+1
   362  006D  2880               	goto	L8
   363  006E                     l823:	
   364                           ;main.c: 238: }
   365                           
   366                           ;main.c: 237: msg.data = MSG_OFF;
   367                           
   368                           
   369                           ;main.c: 239: else
   370                           ;main.c: 240: {
   371                           ;main.c: 241: always_on = 1;
   372  006E  3001               	movlw	1
   373  006F  00A0               	movwf	_always_on
   374  0070  3000               	movlw	0
   375  0071  00A1               	movwf	_always_on+1
   376  0072  2888               	goto	L7
   377  0073                     l827:	
   378                           ;main.c: 245: case MSG_RESET :
   379                           
   380                           ;main.c: 243: }
   381                           ;main.c: 244: break;
   382                           
   383                           ;main.c: 242: msg.data = MSG_ACK;
   384                           
   385                           
   386                           ;main.c: 246: ADRESH = 0;
   387  0073  019E               	clrf	30	;volatile
   388                           
   389                           ;main.c: 247: ADRESL = 0;
   390  0074  1683               	bsf	3,5	;RP0=1, select bank1
   391  0075  1303               	bcf	3,6	;RP1=0, select bank1
   392  0076  019E               	clrf	30	;volatile
   393                           
   394                           ;main.c: 248: msg.data = MSG_ACK;
   395  0077  1283               	bcf	3,5	;RP0=0, select bank0
   396  0078  1303               	bcf	3,6	;RP1=0, select bank0
   397  0079                     l831:	
   398                           ;main.c: 250: case MSG_PING :
   399                           
   400                           ;main.c: 249: break;
   401                           
   402  0079  2888               	goto	L7
   403  007A                     l833:	
   404                           ;main.c: 253: case MSG_TOGGLEADC :
   405                           
   406                           ;main.c: 252: break;
   407                           
   408                           ;main.c: 251: msg.data = MSG_ACK;
   409                           
   410                           
   411                           ;main.c: 254: if (adc_on)
   412  007A  0824               	movf	_adc_on,w
   413  007B  0425               	iorwf	_adc_on+1,w
   414  007C  1903               	btfsc	3,2
   415  007D  2884               	goto	l839
   416                           
   417                           ;main.c: 255: {
   418                           ;main.c: 256: adc_on = 0;
   419  007E  01A4               	clrf	_adc_on
   420  007F  01A5               	clrf	_adc_on+1
   421  0080                     L8:	
   422                           
   423                           ;main.c: 257: msg.data = MSG_OFF;
   424  0080  0826               	movf	main@msg,w
   425  0081  39F0               	andlw	-16
   426  0082  380C               	iorlw	12
   427  0083  288B               	goto	L6
   428  0084                     l839:	
   429                           ;main.c: 258: }
   430                           
   431                           
   432                           ;main.c: 259: else
   433                           ;main.c: 260: {
   434                           ;main.c: 261: adc_on = 1;
   435  0084  3001               	movlw	1
   436  0085  00A4               	movwf	_adc_on
   437  0086  3000               	movlw	0
   438  0087  00A5               	movwf	_adc_on+1
   439  0088                     L7:	
   440                           
   441                           ;main.c: 262: msg.data = MSG_ACK;
   442  0088  0826               	movf	main@msg,w
   443  0089  39F0               	andlw	-16
   444  008A  380E               	iorlw	14
   445  008B                     L6:	
   446  008B  00A6               	movwf	main@msg
   447                           
   448                           ;main.c: 267: }
   449                           
   450                           ;main.c: 263: }
   451                           ;main.c: 264: break;
   452  008C  289F               	goto	l847
   453  008D                     l845:	
   454  008D  0826               	movf	main@msg,w
   455  008E  390F               	andlw	15
   456                           
   457                           ; Switch size 1, requested type "space"
   458                           ; Number of cases is 5, Range of values is 0 to 13
   459                           ; switch strategies available:
   460                           ; Name         Instructions Cycles
   461                           ; simple_byte           16     9 (average)
   462                           ; direct_byte           35     7 (fixed)
   463                           ; jumptable            260     6 (fixed)
   464                           ;	Chosen strategy is simple_byte
   465  008F  3A00               	xorlw	0	; case 0
   466  0090  1903               	skipnz
   467  0091  2873               	goto	l827
   468  0092  3A01               	xorlw	1	; case 1
   469  0093  1903               	skipnz
   470  0094  2879               	goto	l831
   471  0095  3A03               	xorlw	3	; case 2
   472  0096  1903               	skipnz
   473  0097  2831               	goto	l807
   474  0098  3A01               	xorlw	1	; case 3
   475  0099  1903               	skipnz
   476  009A  287A               	goto	l833
   477  009B  3A0E               	xorlw	14	; case 13
   478  009C  1903               	skipnz
   479  009D  2867               	goto	l817
   480  009E  289F               	goto	l847
   481  009F                     l847:	
   482                           
   483                           ;main.c: 268: send_message(msg);
   484  009F  0826               	movf	main@msg,w
   485  00A0  118A  2109  118A   	fcall	_send_message
   486                           
   487                           ;main.c: 269: if (adc_on == 1) interrupt_on();
   488  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   489  00A4  1303               	bcf	3,6	;RP1=0, select bank0
   490  00A5  0324               	decf	_adc_on,w
   491  00A6  0425               	iorwf	_adc_on+1,w
   492  00A7  1D03               	btfss	3,2
   493  00A8  2828               	goto	l805
   494  00A9  118A  215C  118A   	fcall	_interrupt_on
   495  00AC  2828               	goto	l805
   496  00AD                     __end_of_main:	
   497                           ;main.c: 270: }
   498                           ;main.c: 272: return (0);
   499                           ;	Return value of _main is never used
   500                           
   501                           
   502                           	psect	text1
   503  0142                     __ptext1:	
   504 ;; *************** function _set_strobe_input *****************
   505 ;; Defined at:
   506 ;;		line 90 in file "main.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;		None
   511 ;; Return value:  Size  Location     Type
   512 ;;		None               void
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, pclath, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   520 ;;      Params:         0       0       0       0
   521 ;;      Locals:         0       0       0       0
   522 ;;      Temps:          0       0       0       0
   523 ;;      Totals:         0       0       0       0
   524 ;;Total ram usage:        0 bytes
   525 ;; Hardware stack levels used:    1
   526 ;; Hardware stack levels required when called:    2
   527 ;; This function calls:
   528 ;;		_set_receive
   529 ;; This function is called by:
   530 ;;		_main
   531 ;; This function uses a non-reentrant model
   532 ;;
   533                           
   534                           
   535                           ;psect for function _set_strobe_input
   536  0142                     _set_strobe_input:	
   537                           
   538                           ;main.c: 92: TRISA = 0b00000100;
   539                           
   540                           ;incstack = 0
   541                           ; Regs used in _set_strobe_input: [wreg+status,2+status,0+pclath+cstack]
   542  0142  3004               	movlw	4
   543  0143  1683               	bsf	3,5	;RP0=1, select bank1
   544  0144  1303               	bcf	3,6	;RP1=0, select bank1
   545  0145  0085               	movwf	5	;volatile
   546                           
   547                           ;main.c: 93: ANSEL = 0;
   548  0146  0191               	clrf	17	;volatile
   549                           
   550                           ;main.c: 94: TRISC = 0b00111110;
   551  0147  303E               	movlw	62
   552  0148  0087               	movwf	7	;volatile
   553                           
   554                           ;main.c: 95: set_receive();
   555  0149  118A  2153         	fcall	_set_receive
   556  014B  0008               	return
   557  014C                     __end_of_set_strobe_input:	
   558                           ;main.c: 96: return;
   559                           
   560                           
   561                           	psect	text2
   562  0109                     __ptext2:	
   563 ;; *************** function _send_message *****************
   564 ;; Defined at:
   565 ;;		line 152 in file "main.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;  msg             1    wreg     struct .
   568 ;; Auto vars:     Size  Location     Type
   569 ;;  msg             1    7[COMMON] struct .
   570 ;; Return value:  Size  Location     Type
   571 ;;		None               void
   572 ;; Registers used:
   573 ;;		wreg, status,2, status,0, pclath, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   579 ;;      Params:         0       0       0       0
   580 ;;      Locals:         1       0       0       0
   581 ;;      Temps:          2       0       0       0
   582 ;;      Totals:         3       0       0       0
   583 ;;Total ram usage:        3 bytes
   584 ;; Hardware stack levels used:    1
   585 ;; Hardware stack levels required when called:    2
   586 ;; This function calls:
   587 ;;		_set_send
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           
   594                           ;psect for function _send_message
   595  0109                     _send_message:	
   596                           
   597                           ;incstack = 0
   598                           ; Regs used in _send_message: [wreg+status,2+status,0+pclath+cstack]
   599                           ;send_message@msg stored from wreg
   600  0109  00F7               	movwf	send_message@msg
   601  010A                     l78:	
   602                           ;main.c: 154: while(RA2) continue;
   603                           
   604  010A  1283               	bcf	3,5	;RP0=0, select bank0
   605  010B  1303               	bcf	3,6	;RP1=0, select bank0
   606  010C  1905               	btfsc	5,2	;volatile
   607  010D  290A               	goto	l78
   608                           
   609                           ;main.c: 156: set_send();
   610  010E  118A  214C  118A   	fcall	_set_send
   611                           
   612                           ;main.c: 157: PORTC &= 0b11000011;
   613  0111  30C3               	movlw	195
   614  0112  00F5               	movwf	??_send_message
   615  0113  0875               	movf	??_send_message,w
   616  0114  1283               	bcf	3,5	;RP0=0, select bank0
   617  0115  1303               	bcf	3,6	;RP1=0, select bank0
   618  0116  0587               	andwf	7,f	;volatile
   619                           
   620                           ;main.c: 158: PORTC |= msg.data << 2;
   621  0117  0877               	movf	send_message@msg,w
   622  0118  390F               	andlw	15
   623  0119  00F5               	movwf	??_send_message
   624  011A  3001               	movlw	1
   625  011B                     u265:	
   626  011B  1003               	clrc
   627  011C  0DF5               	rlf	??_send_message,f
   628  011D  3EFF               	addlw	-1
   629  011E  1D03               	skipz
   630  011F  291B               	goto	u265
   631  0120  1003               	clrc
   632  0121  0D75               	rlf	??_send_message,w
   633  0122  00F6               	movwf	??_send_message+1
   634  0123  0876               	movf	??_send_message+1,w
   635  0124  0487               	iorwf	7,f	;volatile
   636  0125                     l81:	
   637                           ;main.c: 160: while(!RA2) continue;
   638                           
   639  0125  1905               	btfsc	5,2	;volatile
   640                           
   641                           ;main.c: 164: return;
   642  0126  0008               	return
   643  0127  2925               	goto	l81
   644  0128                     __end_of_send_message:	
   645                           
   646                           	psect	text3
   647  014C                     __ptext3:	
   648 ;; *************** function _set_send *****************
   649 ;; Defined at:
   650 ;;		line 78 in file "main.c"
   651 ;; Parameters:    Size  Location     Type
   652 ;;		None
   653 ;; Auto vars:     Size  Location     Type
   654 ;;		None
   655 ;; Return value:  Size  Location     Type
   656 ;;		None               void
   657 ;; Registers used:
   658 ;;		wreg, status,2, status,0
   659 ;; Tracked objects:
   660 ;;		On entry : 0/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   664 ;;      Params:         0       0       0       0
   665 ;;      Locals:         0       0       0       0
   666 ;;      Temps:          1       0       0       0
   667 ;;      Totals:         1       0       0       0
   668 ;;Total ram usage:        1 bytes
   669 ;; Hardware stack levels used:    1
   670 ;; Hardware stack levels required when called:    1
   671 ;; This function calls:
   672 ;;		Nothing
   673 ;; This function is called by:
   674 ;;		_send_message
   675 ;; This function uses a non-reentrant model
   676 ;;
   677                           
   678                           
   679                           ;psect for function _set_send
   680  014C                     _set_send:	
   681                           
   682                           ;main.c: 80: TRISC &= 0b11000011;
   683                           
   684                           ;incstack = 0
   685                           ; Regs used in _set_send: [wreg+status,2+status,0]
   686  014C  30C3               	movlw	195
   687  014D  00F4               	movwf	??_set_send
   688  014E  0874               	movf	??_set_send,w
   689  014F  1683               	bsf	3,5	;RP0=1, select bank1
   690  0150  1303               	bcf	3,6	;RP1=0, select bank1
   691  0151  0587               	andwf	7,f	;volatile
   692  0152  0008               	return
   693  0153                     __end_of_set_send:	
   694                           ;main.c: 81: return;
   695                           
   696                           
   697                           	psect	text4
   698  00E1                     __ptext4:	
   699 ;; *************** function _receive_msg *****************
   700 ;; Defined at:
   701 ;;		line 138 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  msg             1    7[COMMON] struct .
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      struct .
   708 ;; Registers used:
   709 ;;		wreg, status,2, status,0, pclath, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   715 ;;      Params:         0       0       0       0
   716 ;;      Locals:         1       0       0       0
   717 ;;      Temps:          2       0       0       0
   718 ;;      Totals:         3       0       0       0
   719 ;;Total ram usage:        3 bytes
   720 ;; Hardware stack levels used:    1
   721 ;; Hardware stack levels required when called:    2
   722 ;; This function calls:
   723 ;;		_interrupt_off
   724 ;;		_set_receive
   725 ;; This function is called by:
   726 ;;		_main
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           
   731                           ;psect for function _receive_msg
   732  00E1                     _receive_msg:	
   733                           
   734                           ;main.c: 140: message msg;
   735                           ;main.c: 141: msg.data = 0x0;
   736                           
   737                           ;incstack = 0
   738                           ; Regs used in _receive_msg: [wreg+status,2+status,0+pclath+cstack]
   739  00E1  30F0               	movlw	-16
   740  00E2  05F7               	andwf	receive_msg@msg,f
   741  00E3                     l63:	
   742                           ;main.c: 142: while(!RA2) continue;
   743                           
   744  00E3  1283               	bcf	3,5	;RP0=0, select bank0
   745  00E4  1303               	bcf	3,6	;RP1=0, select bank0
   746  00E5  1D05               	btfss	5,2	;volatile
   747  00E6  28E3               	goto	l63
   748  00E7                     l66:	
   749                           ;main.c: 143: while(RA2) continue;
   750                           
   751  00E7  1905               	btfsc	5,2	;volatile
   752  00E8  28E7               	goto	l66
   753                           
   754                           ;main.c: 144: interrupt_off();
   755  00E9  118A  215A  118A   	fcall	_interrupt_off
   756                           
   757                           ;main.c: 145: set_receive();
   758  00EC  118A  2153  118A   	fcall	_set_receive
   759  00EF                     l69:	
   760                           ;main.c: 146: while(!RA2) continue;
   761                           
   762  00EF  1283               	bcf	3,5	;RP0=0, select bank0
   763  00F0  1303               	bcf	3,6	;RP1=0, select bank0
   764  00F1  1D05               	btfss	5,2	;volatile
   765  00F2  28EF               	goto	l69
   766                           
   767                           ;main.c: 147: msg.data |= PORTC >> 2;
   768  00F3  0807               	movf	7,w	;volatile
   769  00F4  00F5               	movwf	??_receive_msg
   770  00F5  3002               	movlw	2
   771  00F6                     u235:	
   772  00F6  1003               	clrc
   773  00F7  0CF5               	rrf	??_receive_msg,f
   774  00F8  3EFF               	addlw	-1
   775  00F9  1D03               	skipz
   776  00FA  28F6               	goto	u235
   777  00FB  0877               	movf	receive_msg@msg,w
   778  00FC  390F               	andlw	15
   779  00FD  00F6               	movwf	??_receive_msg+1
   780  00FE  0875               	movf	??_receive_msg,w
   781  00FF  04F6               	iorwf	??_receive_msg+1,f
   782  0100  0877               	movf	receive_msg@msg,w
   783  0101  0676               	xorwf	??_receive_msg+1,w
   784  0102  39F0               	andlw	-16
   785  0103  0676               	xorwf	??_receive_msg+1,w
   786  0104  00F7               	movwf	receive_msg@msg
   787  0105                     l72:	
   788                           ;main.c: 148: while(RA2) continue ;
   789                           
   790  0105  1905               	btfsc	5,2	;volatile
   791  0106  2905               	goto	l72
   792                           
   793                           ;main.c: 149: return msg;
   794  0107  0877               	movf	receive_msg@msg,w
   795  0108  0008               	return
   796  0109                     __end_of_receive_msg:	
   797                           
   798                           	psect	text5
   799  0153                     __ptext5:	
   800 ;; *************** function _set_receive *****************
   801 ;; Defined at:
   802 ;;		line 84 in file "main.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;		None
   807 ;; Return value:  Size  Location     Type
   808 ;;		None               void
   809 ;; Registers used:
   810 ;;		wreg, status,2, status,0
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   816 ;;      Params:         0       0       0       0
   817 ;;      Locals:         0       0       0       0
   818 ;;      Temps:          1       0       0       0
   819 ;;      Totals:         1       0       0       0
   820 ;;Total ram usage:        1 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; Hardware stack levels required when called:    1
   823 ;; This function calls:
   824 ;;		Nothing
   825 ;; This function is called by:
   826 ;;		_set_strobe_input
   827 ;;		_receive_msg
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           
   832                           ;psect for function _set_receive
   833  0153                     _set_receive:	
   834                           
   835                           ;main.c: 86: TRISC |= 0b00111100;
   836                           
   837                           ;incstack = 0
   838                           ; Regs used in _set_receive: [wreg+status,2+status,0]
   839  0153  303C               	movlw	60
   840  0154  00F4               	movwf	??_set_receive
   841  0155  0874               	movf	??_set_receive,w
   842  0156  1683               	bsf	3,5	;RP0=1, select bank1
   843  0157  1303               	bcf	3,6	;RP1=0, select bank1
   844  0158  0487               	iorwf	7,f	;volatile
   845  0159  0008               	return
   846  015A                     __end_of_set_receive:	
   847                           ;main.c: 87: return;
   848                           
   849                           
   850                           	psect	text6
   851  015A                     __ptext6:	
   852 ;; *************** function _interrupt_off *****************
   853 ;; Defined at:
   854 ;;		line 132 in file "main.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;		None               void
   861 ;; Registers used:
   862 ;;		None
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   868 ;;      Params:         0       0       0       0
   869 ;;      Locals:         0       0       0       0
   870 ;;      Temps:          0       0       0       0
   871 ;;      Totals:         0       0       0       0
   872 ;;Total ram usage:        0 bytes
   873 ;; Hardware stack levels used:    1
   874 ;; Hardware stack levels required when called:    1
   875 ;; This function calls:
   876 ;;		Nothing
   877 ;; This function is called by:
   878 ;;		_receive_msg
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           
   883                           ;psect for function _interrupt_off
   884  015A                     _interrupt_off:	
   885                           
   886                           ;main.c: 134: INTCONbits.GIE = 0;
   887                           
   888                           ;incstack = 0
   889                           ; Regs used in _interrupt_off: []
   890  015A  138B               	bcf	11,7	;volatile
   891                           
   892                           ;main.c: 135: return;
   893  015B  0008               	return
   894  015C                     __end_of_interrupt_off:	
   895                           
   896                           	psect	text7
   897  015C                     __ptext7:	
   898 ;; *************** function _interrupt_on *****************
   899 ;; Defined at:
   900 ;;		line 126 in file "main.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;		None
   905 ;; Return value:  Size  Location     Type
   906 ;;		None               void
   907 ;; Registers used:
   908 ;;		None
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   914 ;;      Params:         0       0       0       0
   915 ;;      Locals:         0       0       0       0
   916 ;;      Temps:          0       0       0       0
   917 ;;      Totals:         0       0       0       0
   918 ;;Total ram usage:        0 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    1
   921 ;; This function calls:
   922 ;;		Nothing
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           
   929                           ;psect for function _interrupt_on
   930  015C                     _interrupt_on:	
   931                           
   932                           ;main.c: 128: INTCONbits.GIE = 1;
   933                           
   934                           ;incstack = 0
   935                           ; Regs used in _interrupt_on: []
   936  015C  178B               	bsf	11,7	;volatile
   937                           
   938                           ;main.c: 129: return;
   939  015D  0008               	return
   940  015E                     __end_of_interrupt_on:	
   941                           
   942                           	psect	text8
   943  0128                     __ptext8:	
   944 ;; *************** function _adc_init *****************
   945 ;; Defined at:
   946 ;;		line 99 in file "main.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;		None
   951 ;; Return value:  Size  Location     Type
   952 ;;		None               void
   953 ;; Registers used:
   954 ;;		wreg, status,2
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   960 ;;      Params:         0       0       0       0
   961 ;;      Locals:         0       0       0       0
   962 ;;      Temps:          0       0       0       0
   963 ;;      Totals:         0       0       0       0
   964 ;;Total ram usage:        0 bytes
   965 ;; Hardware stack levels used:    1
   966 ;; Hardware stack levels required when called:    1
   967 ;; This function calls:
   968 ;;		Nothing
   969 ;; This function is called by:
   970 ;;		_main
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           
   975                           ;psect for function _adc_init
   976  0128                     _adc_init:	
   977                           
   978                           ;main.c: 102: always_on = 0;
   979                           
   980                           ;incstack = 0
   981                           ; Regs used in _adc_init: [wreg+status,2]
   982  0128  1283               	bcf	3,5	;RP0=0, select bank0
   983  0129  1303               	bcf	3,6	;RP1=0, select bank0
   984  012A  01A0               	clrf	_always_on
   985  012B  01A1               	clrf	_always_on+1
   986                           
   987                           ;main.c: 105: ANSELbits.ANS5 = 1;
   988  012C  1683               	bsf	3,5	;RP0=1, select bank1
   989  012D  1303               	bcf	3,6	;RP1=0, select bank1
   990  012E  1691               	bsf	17,5	;volatile
   991                           
   992                           ;main.c: 108: ADCON0 = 0b10010101;
   993  012F  3095               	movlw	149
   994  0130  1283               	bcf	3,5	;RP0=0, select bank0
   995  0131  1303               	bcf	3,6	;RP1=0, select bank0
   996  0132  009F               	movwf	31	;volatile
   997                           
   998                           ;main.c: 109: ADCON1 = 0b00010000;
   999  0133  3010               	movlw	16
  1000  0134  1683               	bsf	3,5	;RP0=1, select bank1
  1001  0135  1303               	bcf	3,6	;RP1=0, select bank1
  1002  0136  009F               	movwf	31	;volatile
  1003                           
  1004                           ;main.c: 112: OPTION_REG = 0b00000111;
  1005  0137  3007               	movlw	7
  1006  0138  0081               	movwf	1	;volatile
  1007                           
  1008                           ;main.c: 113: INTCONbits.T0IE =1;
  1009  0139  168B               	bsf	11,5	;volatile
  1010                           
  1011                           ;main.c: 114: INTCONbits.PEIE = 1;
  1012  013A  170B               	bsf	11,6	;volatile
  1013                           
  1014                           ;main.c: 115: PIE1bits.ADIE = 1;
  1015  013B  170C               	bsf	12,6	;volatile
  1016                           
  1017                           ;main.c: 116: INTCONbits.T0IF = 0;
  1018  013C  110B               	bcf	11,2	;volatile
  1019                           
  1020                           ;main.c: 117: PIR1bits.ADIF = 0;
  1021  013D  1283               	bcf	3,5	;RP0=0, select bank0
  1022  013E  1303               	bcf	3,6	;RP1=0, select bank0
  1023  013F  130C               	bcf	12,6	;volatile
  1024                           
  1025                           ;main.c: 118: INTCONbits.GIE = 1;
  1026  0140  178B               	bsf	11,7	;volatile
  1027  0141  0008               	return
  1028  0142                     __end_of_adc_init:	
  1029                           
  1030                           	psect	text9
  1031  00AD                     __ptext9:	
  1032 ;; *************** function _isr *****************
  1033 ;; Defined at:
  1034 ;;		line 167 in file "main.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;  i               2    0        unsigned int 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;		None               void
  1041 ;; Registers used:
  1042 ;;		wreg, status,2, status,0
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1048 ;;      Params:         0       0       0       0
  1049 ;;      Locals:         0       0       0       0
  1050 ;;      Temps:          4       0       0       0
  1051 ;;      Totals:         4       0       0       0
  1052 ;;Total ram usage:        4 bytes
  1053 ;; Hardware stack levels used:    1
  1054 ;; This function calls:
  1055 ;;		Nothing
  1056 ;; This function is called by:
  1057 ;;		Interrupt level 1
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           
  1062                           ;psect for function _isr
  1063  00AD                     _isr:	
  1064                           
  1065                           ;main.c: 170: unsigned i;
  1066                           ;main.c: 172: if (ADIF)
  1067  00AD  1F0C               	btfss	12,6	;volatile
  1068  00AE  28D0               	goto	i1l87
  1069                           
  1070                           ;main.c: 173: {
  1071                           ;main.c: 174: ADIF = 0;
  1072  00AF  130C               	bcf	12,6	;volatile
  1073                           
  1074                           ;main.c: 176: voltage = (ADRESH<<8) + ADRESL;
  1075  00B0  081E               	movf	30,w	;volatile
  1076  00B1  00A3               	movwf	_voltage+1
  1077  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  1078  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  1079  00B4  081E               	movf	30,w	;volatile
  1080  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1081  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  1082  00B7  00A2               	movwf	_voltage
  1083                           
  1084                           ;main.c: 178: if (voltage > 400 )
  1085  00B8  3001               	movlw	1
  1086  00B9  0223               	subwf	_voltage+1,w
  1087  00BA  3091               	movlw	145
  1088  00BB  1903               	skipnz
  1089  00BC  0222               	subwf	_voltage,w
  1090  00BD  1803               	btfsc	3,0
  1091  00BE  28CF               	goto	i1l793
  1092                           
  1093                           ;main.c: 182: else if (!always_on && voltage < 360)
  1094                           
  1095                           ;main.c: 181: }
  1096                           
  1097                           ;main.c: 179: {
  1098                           ;main.c: 180: RC0 = 1;
  1099  00BF  0820               	movf	_always_on,w
  1100  00C0  0421               	iorwf	_always_on+1,w
  1101  00C1  1D03               	btfss	3,2
  1102  00C2  28CC               	goto	i1l791
  1103  00C3  3001               	movlw	1
  1104  00C4  0223               	subwf	_voltage+1,w
  1105  00C5  3068               	movlw	104
  1106  00C6  1903               	skipnz
  1107  00C7  0222               	subwf	_voltage,w
  1108  00C8  1803               	skipnc
  1109  00C9  28CC               	goto	i1l791
  1110                           
  1111                           ;main.c: 183: {
  1112                           ;main.c: 184: RC0 = 0;
  1113  00CA  1007               	bcf	7,0	;volatile
  1114                           
  1115                           ;main.c: 185: }
  1116  00CB  28D0               	goto	i1l87
  1117  00CC                     i1l791:	
  1118                           
  1119                           ;main.c: 186: else if (always_on)
  1120  00CC  0820               	movf	_always_on,w
  1121  00CD  0421               	iorwf	_always_on+1,w
  1122  00CE  1D03               	btfss	3,2
  1123  00CF                     i1l793:	
  1124                           
  1125                           ;main.c: 187: {
  1126                           ;main.c: 188: RC0 =1;
  1127  00CF  1407               	bsf	7,0	;volatile
  1128  00D0                     i1l87:	
  1129                           
  1130                           ;main.c: 189: }
  1131                           ;main.c: 191: }
  1132                           ;main.c: 193: if (T0IF)
  1133  00D0  1D0B               	btfss	11,2	;volatile
  1134  00D1  28D6               	goto	i1l95
  1135                           
  1136                           ;main.c: 194: {
  1137                           ;main.c: 195: T0IF = 0;
  1138  00D2  110B               	bcf	11,2	;volatile
  1139                           
  1140                           ;main.c: 197: if (ADCON0bits.GO != 1)
  1141  00D3  189F               	btfsc	31,1	;volatile
  1142  00D4  28D6               	goto	i1l95
  1143                           
  1144                           ;main.c: 198: {
  1145                           ;main.c: 199: ADCON0bits.GO = 1;
  1146  00D5  149F               	bsf	31,1	;volatile
  1147  00D6                     i1l95:	
  1148  00D6  0873               	movf	??_isr+3,w
  1149  00D7  00FF               	movwf	127
  1150  00D8  0872               	movf	??_isr+2,w
  1151  00D9  008A               	movwf	10
  1152  00DA  0871               	movf	??_isr+1,w
  1153  00DB  0084               	movwf	4
  1154  00DC  0E70               	swapf	??_isr^(0+-128),w
  1155  00DD  0083               	movwf	3
  1156  00DE  0EFE               	swapf	126,f
  1157  00DF  0E7E               	swapf	126,w
  1158  00E0  0009               	retfie
  1159  00E1                     __end_of_isr:	
  1160  007E                     btemp	set	126	;btemp
  1161  007E                     wtemp	set	126
  1162  007E                     wtemp0	set	126
  1163  0080                     wtemp1	set	128
  1164  0082                     wtemp2	set	130
  1165  0084                     wtemp3	set	132
  1166  0086                     wtemp4	set	134
  1167  0088                     wtemp5	set	136
  1168  007F                     wtemp6	set	127
  1169  007E                     ttemp	set	126
  1170  007E                     ttemp0	set	126
  1171  0081                     ttemp1	set	129
  1172  0084                     ttemp2	set	132
  1173  0087                     ttemp3	set	135
  1174  007F                     ttemp4	set	127
  1175  007E                     ltemp	set	126
  1176  007E                     ltemp0	set	126
  1177  0082                     ltemp1	set	130
  1178  0086                     ltemp2	set	134
  1179  0080                     ltemp3	set	128
  1180                           
  1181                           	psect	intentry
  1182  0004                     __pintentry:	
  1183                           ;incstack = 0
  1184                           ; Regs used in _isr: [wreg+status,2+status,0]
  1185                           
  1186  0004                     interrupt_function:	
  1187  007E                     saved_w	set	btemp
  1188  0004  00FE               	movwf	btemp
  1189  0005  0E03               	swapf	3,w
  1190  0006  00F0               	movwf	??_isr
  1191  0007  0804               	movf	4,w
  1192  0008  00F1               	movwf	??_isr+1
  1193  0009  080A               	movf	10,w
  1194  000A  00F2               	movwf	??_isr+2
  1195  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1196  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1197  000D  087F               	movf	btemp+1,w
  1198  000E  00F3               	movwf	??_isr+3
  1199  000F  118A  28AD         	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      1       7
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_receive_msg
    _main->_send_message
    _set_strobe_input->_set_receive
    _send_message->_set_send
    _receive_msg->_set_receive

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     168
                                              8 COMMON     2     2      0
                                              0 BANK0      1     1      0
                           _adc_init
                       _interrupt_on
                        _receive_msg
                       _send_message
                   _set_strobe_input
 ---------------------------------------------------------------------------------
 (1) _set_strobe_input                                     0     0      0       0
                        _set_receive
 ---------------------------------------------------------------------------------
 (1) _send_message                                         3     3      0      22
                                              5 COMMON     3     3      0
                           _set_send
 ---------------------------------------------------------------------------------
 (2) _set_send                                             1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _receive_msg                                          3     3      0      24
                                              5 COMMON     3     3      0
                      _interrupt_off
                        _set_receive
 ---------------------------------------------------------------------------------
 (2) _set_receive                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _interrupt_off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interrupt_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  6     6      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_init
   _interrupt_on
   _receive_msg
     _interrupt_off
     _set_receive
   _send_message
     _set_send
   _set_strobe_input
     _set_receive

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      1       7       3        8.8%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      11       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      11      10        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Oct 22 21:23:34 2015

              __CFG_CP$OFF 0000      __end_of_interrupt_off 015C                         l63 00E3  
                       l72 0105                         l81 0125                         l66 00E7  
                       l69 00EF                         l78 010A                        l805 0028  
                      l831 0079                        l823 006E                        l807 0031  
                      l833 007A                        l817 0067                        l827 0073  
                      l845 008D                        l839 0084                        l847 009F  
                      _RA2 002A                        _RC0 0038                        u235 00F6  
                      u265 011B               __CFG_CPD$OFF 0000                        u355 004A  
                      _isr 00AD                        fsr0 0004                       _ADIF 0066  
                     ?_isr 0070                       _T0IF 005A                       i1l95 00D6  
                     i1l87 00D0                       _main 001A                       btemp 007E  
                     ltemp 007E                       start 0011                       ttemp 007E  
                     wtemp 007E              __CFG_IESO$OFF 0000              __CFG_MCLRE$ON 0000  
                    ??_isr 0070                      ?_main 0070              __CFG_WDTE$OFF 0000  
                    _ANSEL 0091                      i1l791 00CC                      i1l793 00CF  
                    _PORTC 0007                      _TRISA 0085                      _TRISC 0087  
           __CFG_FCMEN$OFF 0000             __CFG_BOREN$OFF 0000                      pclath 000A  
                    ltemp0 007E                      ltemp1 0082                      ltemp2 0086  
                    ltemp3 0080                      ttemp0 007E                      ttemp1 0081  
                    ttemp2 0084                      ttemp3 0087                      ttemp4 007F  
                    status 0003                      wtemp0 007E                      wtemp1 0080  
                    wtemp2 0082                      wtemp3 0084                      wtemp4 0086  
                    wtemp5 0088                      wtemp6 007F               ?_receive_msg 0070  
          __initialization 0013               __end_of_main 00AD                     ??_main 0078  
          send_message@msg 0077                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E           __end_of_adc_init 0142  
           __CFG_PWRTE$OFF 0000               ?_set_receive 0070                     _adc_on 0024  
__size_of_set_strobe_input 000A           __end_of_set_send 0153                     saved_w 007E  
  __end_of__initialization 0017             __pcstackCOMMON 0070              ?_interrupt_on 0070  
           receive_msg@msg 0077                 __pbssBANK0 0020                 __pmaintext 001A  
           ??_interrupt_on 0074       __size_of_receive_msg 0028                 __pintentry 0004  
            ?_send_message 0070                  ?_adc_init 0070     __size_of_interrupt_off 0002  
                ?_set_send 0070       __size_of_set_receive 0007             ??_send_message 0075  
                _ANSELbits 0091                 ??_adc_init 0074                    __ptext1 0142  
                  __ptext2 0109                    __ptext3 014C                    __ptext4 00E1  
                  __ptext5 0153                    __ptext6 015A                    __ptext7 015C  
                  __ptext8 0128                    __ptext9 00AD           _set_strobe_input 0142  
             __size_of_isr 0034                    main@msg 0026                    _voltage 0022  
     end_of_initialization 0017                 ??_set_send 0074              _interrupt_off 015A  
     __end_of_interrupt_on 015E             ?_interrupt_off 0070        start_initialization 0013  
              __end_of_isr 00E1       __end_of_send_message 0128          __size_of_adc_init 001A  
                ___latbits 0001              __pcstackBANK0 0026   __end_of_set_strobe_input 014C  
            ??_receive_msg 0075                  __pnvBANK0 0024            ??_interrupt_off 0074  
        __size_of_set_send 0007                  _always_on 0020      __size_of_interrupt_on 0002  
        interrupt_function 0004                   _PIE1bits 008C                   _PIR1bits 000C  
            ??_set_receive 0074               _interrupt_on 015C        __end_of_receive_msg 0109  
               _ADCON0bits 001F      __size_of_send_message 001F               _send_message 0109  
                 _adc_init 0128        __end_of_set_receive 015A              __size_of_main 0093  
              _receive_msg 00E1                   _set_send 014C                 _INTCONbits 000B  
                 intlevel1 0000          ?_set_strobe_input 0070         ??_set_strobe_input 0075  
              _set_receive 0153                 _OPTION_REG 0081         __CFG_FOSC$INTOSCIO 0000  
